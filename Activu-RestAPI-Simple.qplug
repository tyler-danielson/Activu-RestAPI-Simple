-- Vis|Ability Interface Server Connect Plugin
-- by Activu
-- December 2023


-- Information block for the plugin
PluginInfo = {
  Name = "Activu~Basic Control",
  Version = "1.0",
  BuildVersion = "1.0.0.191",
  Id = "Activu RestAPI Simple",
  Author = "Tyler Danielson",
  Description = "A plugin to interface with Activu RestAPI.  Written by Tyler Danielson for Activu Corp.",
  IsManaged = true,
  Type = Reflect and Reflect.Types.VideoDistribution or 0,
  Manufacturer = "Activu",
  Model = "Vis|ability"
}

-- Define the color of the plugin object in the design
function GetColor(props)
  return {70,70,70 }
end

local Colors = {
  White = {255, 255, 255},
  Black = {0, 0, 0},
  Red = {255, 0, 0},
  Green = {0, 255, 0},
  Yellow = {239,156,0},
  DarkGrey = {200,200,200}-- {70,70,70}
}

--*****************************************************************************
--* this is a custom string added to pull and encode a logo in a seperate file
--* by moving to a txt file, it hides the error in vscode
--*****************************************************************************
  LOGO = "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"
  LOGO2 = ""

-------********add note for this
--Pull templates from a separate file
  local pages = {"Layout","Script","Source"}
  
  pageDefs = {}
  
  for i = 1, #pages do
    local type = pages[i]
    pageDefs[type] = {
      pretty = type,
      edit = type.."_Edit",
      heading1 = type.." DEFINITION",
      heading2 = "DEFINE "..type.."s",
      callDef = type.."_CallDefinition",
      preview = {
        name = type.."_Preview",
        type = "none"
      },
      get = "Get"..type,
      call = type.."_Call",
      id = type.."_ID",
      legend = type.."_Legend",
      uciDefined = type.."_uciDefined",
      layoutDefs = {
        uciOption = true
      },
      remove = "Remove_"..type,
      region = {
        x = type..'_x',
        y = type..'_y',
        width = type..'_width',
        height = type..'_height',
      },
      triggerAll = "Trigger_"..type
    }
  end
  
  pageDefs.Layout.preview.type = "image"
  pageDefs.Source.layoutDefs.uciOption = false



-- The name that will initially display when dragged into a design
function GetPrettyName(props)
  return "Activu RestAPI, version " .. PluginInfo.Version
end

-- Optional function used if plugin has multiple pages
function GetPages(props)
  local pages = {}
  local function BuildPageNames()
    pagenames={ "Setup","Wall Config"}
      local NumOfLayouts = props["Number of Layouts"].Value
      local NumOfScripts = props["Number of Scripts"].Value
      local NumOfSources = props["Number of Sources"].Value
      if NumOfLayouts > 0 then
        table.insert(pagenames,"Layouts")
      end
      if NumOfScripts > 0 then
        table.insert(pagenames,"Scripts")
      end
      if NumOfSources > 0 then
        table.insert(pagenames,"Sources")
      end
    return pagenames
  end
  for ix,name in ipairs(BuildPageNames()) do
    table.insert(pages, {name = pagenames[ix]})
  end
  return pages
end

-- Define User configurable Properties of the plugin
function GetProperties()
  local props = {}
  props={
    {Name = "Number of Layouts",Type = "integer",Min = 2,Max = 25,Value = 5},
    {Name = "Number of Scripts",Type = "integer",Min = 2,Max = 25,Value = 5},
    {Name = "Number of Sources",Type = "integer",Min = 2,Max = 25,Value = 5},
    {Name ="Debug Print",Type = "enum", Choices = {"None", "Tx/Rx", "Tx", "Rx", "Function Calls", "All"},Value = "None"},
  }
  return props
end

-- Optional function to update available properties when properties are altered by the user
function RectifyProperties(props)
  if props.plugin_show_debug.Value == false then
    props["Debug Print"].IsHidden = true
  end
  return props
end

-- Defines the Controls used within the plugin
function GetControls(props)
  local controls = {}
  controls ={
    {Name = "WebAddress",ControlType = "Text",UserPin=true,PinStyle="Both"},
    {Name = "APIkey",ControlType = "Text",UserPin=true,PinStyle="Both"},
    {Name = "GetWalls", ControlType="Button",ButtonType="Trigger",Count=1,UserPin=true,PinStyle="Both"},
    {Name = "LayoutSourceListTemp", ControlType="Text",TextBoxType="ComboBox",Count=1,UserPin=true,PinStyle="Both"},
    {Name = "AvailableWalls",ControlType="Text",TextBoxType="ComboBox",Count=1,UserPin=true,PinStyle="Both"},
    {Name = "WallName",ControlType = "Text",UserPin=true,PinStyle="Both"},
    {Name = "WallID",ControlType = "Text",UserPin=true,PinStyle="Both"},
    {Name = "Wall_X",ControlType="Knob",ControlUnit="Integer",Min=0,Max=23040,UserPin=true,PinStyle="Output"},
    {Name = "Wall_Y",ControlType="Knob",ControlUnit="Integer",Min=0,Max=6480,UserPin=true,PinStyle="Output"},
    {Name = "Wall_Width",ControlType="Knob",ControlUnit="Integer",Min=1,Max=23040,UserPin=true,PinStyle="Output"},
    {Name = "Wall_Height",ControlType="Knob",ControlUnit="Integer",Min=1,Max=6480,UserPin=true,PinStyle="Output"},
    {Name = "Wall_VS",ControlType="Text",TextBoxType="ComboBox",Count=1,UserPin=true,PinStyle="Both"},
    {Name = "Wall_Layouts",ControlType="Text",TextBoxType="ComboBox",Count=1,UserPin=true,PinStyle="Both"},
    {Name = "Wall_Templates",ControlType="Text",TextBoxType="ComboBox",UserPin=true,PinStyle="Both"},
    {Name = "LoadedSources",ControlType="Text",TextBoxType="ComboBox",Count=5,UserPin=true,PinStyle="Output"},
    {Name = "VS_SourceView_Select",ControlType="Button",ButtonType="Toggle",Count=5,UserPin=true,PinStyle="Both"},
    {Name = "ClearVS",ControlType="Button",ButtonType="Trigger",UserPin=true,PinStyle="Both"},
    {Name = "LoadLayout", ControlType="Button",ButtonType="Trigger",Count=1,UserPin=true,PinStyle="Both"},
    {Name = "GetWallSources",ControlType="Button",ButtonType="Trigger",UserPin=true,PinStyle="Both"},
    {Name = "btnClear",ControlType="Button",ButtonType="Trigger",UserPin=true,PinStyle="Both"},
    {Name = "btnModeToggle",ControlType="Button",ButtonType="Toggle",UserPin=true,PinStyle="Both"},
    {Name = "Last_Commands",ControlType="Text",TextBoxType="ListBox",UserPin=true,PinStyle="Output"},
    {Name = "CalledCommand",ControlType="Text",UserPin=true,PinStyle="Output"},
    {Name = "ResponseBody",ControlType="Text",UserPin=true,PinStyle="Output"},
    {Name = "ResponseCode",ControlType="Text",UserPin=true,PinStyle="Output"},
    {Name = "ResponseData",ControlType="Text",UserPin=true,PinStyle="Output"},
    {Name = "ResponseError",ControlType="Text",UserPin=true,PinStyle="Output"},
    {Name = "ResponseURL",ControlType="Text",UserPin=true,PinStyle="Output"},
    {Name = "Status",ControlType = "Indicator",IndicatorType = Reflect and "StatusGP" or "Status",PinStyle = "Output",UserPin = true} -- Set IndicatorType per certification requirements
  }
  
  --Build Dynamic Controls based of simple activu commands
  SIMPLE_COMMANDS = {'Layout','Script','Source'}
  for k,type in ipairs(SIMPLE_COMMANDS) do
    local qty = props["Number of "..type.."s"].Value
    table.insert(controls,{Name= pageDefs[type].edit, ControlType="Button",ButtonType="Toggle",Count=qty,UserPin=true,PinStyle="Both"})
    table.insert(controls,{Name= pageDefs[type].legend, ControlType="Text",Count=qty,UserPin=true,PinStyle="Both"})
    table.insert(controls,{Name= pageDefs[type].uciDefined, ControlType="Button",ButtonType="Toggle",Count=qty,UserPin=true,PinStyle="Both"})
    table.insert(controls,{Name= pageDefs[type].call, ControlType="Button",ButtonType="Trigger",Count=qty,UserPin=true,PinStyle="Both"})
    table.insert(controls,{Name= pageDefs[type].remove, ControlType="Button",ButtonType="Trigger",Count=qty,UserPin=true,PinStyle="Both"})
    table.insert(controls,{Name= pageDefs[type].region.x, ControlType="Knob",ControlUnit="Integer",Min=0,Max=23040,Count=qty,UserPin=true,PinStyle="Both"})
    table.insert(controls,{Name= pageDefs[type].region.y, ControlType="Knob",ControlUnit="Integer",Min=0,Max=6480,Count=qty,UserPin=true,PinStyle="Both"})
    table.insert(controls,{Name= pageDefs[type].region.width,ControlType="Knob",ControlUnit="Integer",Min=0,Max=23040,Count=qty,UserPin=true,PinStyle="Both"})
    table.insert(controls,{Name= pageDefs[type].region.height, ControlType="Knob",ControlUnit="Integer",Min=0,Max=6480,Count=qty,UserPin=true,PinStyle="Both"})
    table.insert(controls,{Name= pageDefs[type].callDef, ControlType="Text",TextBoxType="ComboBox",Count=qty,UserPin=true,PinStyle="Both"})
    table.insert(controls,{Name= pageDefs[type].id, ControlType="Text",Count=qty,UserPin=true,PinStyle="Both"})
    table.insert(controls,{Name= pageDefs[type].preview.name,ControlType="Button",ButtonType="Toggle",Count=1,UserPin=true,PinStyle="Both"})
    table.insert(controls,{Name= pageDefs[type].get, ControlType="Button",ButtonType="Trigger",Count=1,UserPin=true,PinStyle="Both"})
    table.insert(controls,{Name= pageDefs[type].triggerAll, ControlType="Button",ButtonType="Trigger",Count=1,UserPin=true,PinStyle="Output"})
  end
  return controls
end

--Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
  local layout = {}
  local graphics = {}
  layout   = {}
  graphics = {}
  local Colors = {
    White = {255, 255, 255},
    Black = {0, 0, 0},
    Red = {255, 0, 0},
    Green = {0, 255, 0},
    Yellow = {239,156,0},
    DarkGrey = {200,200,200}-- {70,70,70}
  }
  LOGO_WIDTH = 90
  LOGO2_WIDTH = 100
  LOGO_HEIGHT = 30
  LOGO2_HEIGHT = 24
  BORDER_MARGIN = 4
  COMMON_MARGIN = BORDER_MARGIN*2
  SETUP_PAGE_W = 450
  SETUP_BLOCK_W = SETUP_PAGE_W-COMMON_MARGIN
  SETUP_INPUT_W = SETUP_PAGE_W - COMMON_MARGIN * 4
  DELTA_Y = 18
  DEFAULT_INPUT_SIZE = {SETUP_INPUT_W,DELTA_Y}
  SETUP_CENTER = SETUP_PAGE_W/2
  DEFAULT_INPUT_X = COMMON_MARGIN*2
  LABEL_SIZE = 11
  INPUT_SIZE = 9
  BACKGROUND_DEF = {
    Type = "GroupBox",
    CornerRadius = 8,
    Fill = Colors.DarkGrey,
    Position = {BORDER_MARGIN, BORDER_MARGIN},
    Size = {
      SETUP_BLOCK_W,
      DELTA_Y * 6
    },
    FontSize = LABEL_SIZE
  }
  
  -----------------------------------------------------------------
  local function BuildPageNames()
    pagenames={ "Setup","Wall Config"}
    --if props["Touchpanel Mode"].Value == "Yes" then 
    local NumOfLayouts = props["Number of Layouts"].Value
    local NumOfScripts = props["Number of Scripts"].Value
    local NumOfSources = props["Number of Sources"].Value
    if NumOfLayouts > 0 then
      table.insert(pagenames,"Layouts")
    end
    if NumOfScripts > 0 then
      table.insert(pagenames,"Scripts")
    end
    if NumOfSources > 0 then
      table.insert(pagenames,"Sources")
    end
    return pagenames
  end
  
  TempY = COMMON_MARGIN + LOGO_HEIGHT + DELTA_Y
  local CurrentPage = BuildPageNames()[props["page_index"].Value]
  
  function LineBreak(d)
    if d == nil then d = 1 end
    TempY = TempY + DELTA_Y*d
    graphics[1].Size[2] = TempY + DELTA_Y*4
  end
  
  --*********************
  --* Activu Logo *
  --* uses 'LOGO' variable from logo.txt
  --*********************
  function AddLogo()
    table.insert(graphics,BACKGROUND_DEF)
    table.insert(graphics,{Type="Image",Image=LOGO,Position={COMMON_MARGIN,COMMON_MARGIN},Size={LOGO_WIDTH,LOGO_HEIGHT}})
    local rightAlign = SETUP_BLOCK_W - LOGO2_WIDTH
    table.insert(graphics,{Type="Image",Image=LOGO2,Position={rightAlign,COMMON_MARGIN},Size={LOGO2_WIDTH,LOGO2_HEIGHT}})
    table.insert(graphics,{Type="Label",Text=string.format("Plugin Version %s",PluginInfo.Version),FontSize=9,Position={rightAlign,COMMON_MARGIN+LOGO2_HEIGHT},Size={LOGO2_WIDTH,12},HTextAlign="Right"})
  
  end
  
  function AddHeader(heading)
    table.insert(graphics,{
      Type = "Header",
      Text = heading,
      FontStyle = "Roboto Mono",
      Position = {DEFAULT_INPUT_X, TempY},
      Size = DEFAULT_INPUT_SIZE,
      FontSize = 12,
    })
    LineBreak(1.3)
  end
  
  function AddSubheading(subheading,percentX,percentW,size)
    --local x = DEFAULT_INPUT_X
    --if percentX > 0 then x = DEFAULT_INPUT_X + SETUP_INPUT_W * percentW / 100 end
    local fontSize = LABEL_SIZE
    local blockHeight = nil
    if size ~= nil then
      fontSize = 8
      blockHeight = 56
    end
    table.insert(graphics,{
      Type = "Text",
      Text = subheading,
      Position = {CustomPosX(percentX), TempY},
      Size = CustomSize(percentW,blockHeight),
      FontSize = fontSize,
    })
  end
  
  function CustomSize(percentX,percentY)
    if percentY == nil then percentY = 100 end
    local width = SETUP_INPUT_W * percentX/100
    local height = DELTA_Y * percentY/100
    return {width,height}
  end
  
  function CustomPosX(percent)
    local x = DEFAULT_INPUT_X + SETUP_INPUT_W * percent/100
    return x
  end
  
  
  function BuildEditPage(pageType)
    local defs = pageDefs[pageType]
    local pretty = defs.pretty
    local prettyPlural = pretty.."s"
    local numOfButtons = props["Number of "..pageType.."s"].Value
    local previewBoxSize = 500
    AddLogo()
    if defs.preview.type == "image" then previewBoxSize = 900 end
    table.insert(graphics, {
      Type = "GroupBox",
      CornerRadius = 4,
      StrokeColor = Colors.Yellow,
      StrokeWidth=1,
      Position = {CustomPosX(-2.5), TempY},
      Size = CustomSize(105,previewBoxSize),
      FontSize = LABEL_SIZE
    })
    LineBreak()
    AddHeader(string.upper(defs.heading1))
    AddSubheading(string.upper(pageType).." ID",0,45)
    if defs.preview.type == "image" then
      AddSubheading("PREVIEW",55,45)
    end
    LineBreak()
    
    for i = 1,numOfButtons do
      layout[defs.id.." "..i] = {
        PrettyName = prettyPlural.."~Definition~"..pretty.." "..i.."~ID",
        Style = "Text",
        Position = {DEFAULT_INPUT_X, TempY},
        Size = CustomSize(45,100)
      }
    end
    if defs.preview.type == "image" then
      layout[defs.preview.name] = {
        PrettyName = prettyPlural.."~Preview",
        Style = "Button",
        ButtonStyle = "Trigger",
        Legend= "",
        ButtonVisualStyle = "Flat",
        Position = {CustomPosX(55), TempY},
        Size = CustomSize(45,450)}
        LineBreak()
    elseif defs.preview.type == "text" then
      layout[defs.preview.name] = {
        Style = "TextBox",
        Position = {CustomPosX(55), TempY},
        Size = CustomSize(45,700)}
    end
  
    if pageType == "Layout" then 
      AddSubheading("LAYOUT SOURCES",0,45)
      LineBreak()
      layout["LayoutSourceListTemp"] = {
        Style="ComboBox",
        PrettyName = prettyPlural.."~Definition~Layout Sources",
        Position = {CustomPosX(0), TempY},
        Size = CustomSize(45,100),
      }
      LineBreak(2)
    end
  
  
    LineBreak(2)
    layout[defs.get] = {
      PrettyName = prettyPlural.."~Get "..prettyPlural,
      Style="Button",
      ButtonStyle = "Trigger",
      Legend = "GET LATEST "..string.upper(pageType).."S ↺",
      Position = {CustomPosX(30), TempY},
      Size = CustomSize(40),
    }
    layout[defs.triggerAll] = {
      PrettyName = prettyPlural.."~Any "..pretty.." Trigger",
      Style = "LED",
      Legend = "ANY",
      Position = {CustomPosX(88), TempY},
      Size = CustomSize(12),
    }
    LineBreak()
    AddSubheading("🔍",0,5)
    AddSubheading(string.upper(pageType).." DEFINITION",5,40)
    if pageType == "Source" then
      AddSubheading("X",47,7)
      AddSubheading("Y",54,7)
      AddSubheading("W",61,7)
      AddSubheading("H",68,7)
      AddSubheading("ADD",76,12)
      AddSubheading("REMOVE",88,12)
    else
      AddSubheading("UCI?",48,7)
      AddSubheading("LEGEND",55,30)
      AddSubheading("TRIGGER",88,12)
    end
    
    LineBreak()
    for i = 1, numOfButtons do
      layout[defs.edit.." "..i] = {
        PrettyName = prettyPlural.."~Edit "..pretty.." Select~"..pretty.." "..i,
        Style = "Button",
        ButtonStyle = "Toggle",
        StrokeColor = Colors.Yellow,
        Legend= tostring(i),
        ButtonVisualStyle = "Gloss",
        Position = {CustomPosX(0), TempY},
        Size = CustomSize(5)
      }
      layout[defs.callDef.." "..i] = {
        PrettyName = prettyPlural.."~Definition~"..pretty.." "..i.."~Name",
        Style = "ComboBox",
        StrokeColor = Colors.Yellow,
        Position = {CustomPosX(5), TempY},
        Size = CustomSize(40,100)
      }
      ----
      if pageType == "Source" then
        layout[defs.region.x.." "..i] = {
          Position = {CustomPosX(47), TempY},
          Size = CustomSize(7,100),
          PrettyName = "Sources~Definition~Source "..i.."~X",
          Style="Text"
        }
        layout[defs.region.y.." "..i] = {
          Position = {CustomPosX(54), TempY},
          Size = CustomSize(7,100),
          PrettyName = "Sources~Definition~Source "..i.."~Y",
          Style="Text"
        }
        layout[defs.region.width.." "..i] = {
          Position = {CustomPosX(61), TempY},
          Size = CustomSize(7,100),
          PrettyName = "Sources~Definition~Source "..i.."~Width",
          Style="Text"
        }
        layout[defs.region.height.." "..i] = {
          Position = {CustomPosX(68), TempY},
          Size = CustomSize(7,100),
          PrettyName = "Sources~Definition~Source "..i.."~Height",
          Style="Text"
        }
        -----
        layout[defs.call.." "..i] = {
          PrettyName = prettyPlural.."~Load "..pretty.." Trigger~"..pretty.." "..i,
          Style = "Button",
          ButtonStyle = "Trigger",
          ButtonVisualStyle = "Gloss",
          FontSize = 8,
          Position = {CustomPosX(76), TempY},
          Size = CustomSize(12)
        }
        layout[defs.remove.." "..i] = {
          PrettyName = prettyPlural.."~Remove "..pretty.." Trigger~"..pretty.." "..i,
          Style = "Button",
          ButtonStyle = "Trigger",
          ButtonVisualStyle = "Gloss",
          FontSize = 8,
          Position = {CustomPosX(88), TempY},
          Size = CustomSize(12)
        }
      else
        layout[defs.uciDefined.." "..i] = {
          PrettyName = prettyPlural.."~Definition~"..pretty.." "..i.."~UCI Defined",
          Style = "Button",
          ButtonStyle = "Toggle",
          StrokeColor = Colors.Yellow,
          Position = {CustomPosX(49), TempY},
          Size = CustomSize(5,100)
        }
        layout[defs.legend.." "..i] = {
          PrettyName = prettyPlural.."~Definition~"..pretty.." "..i.."~Legend",
          Style = "Text",
          StrokeColor = Colors.Yellow,
          Position = {CustomPosX(55), TempY},
          Size = CustomSize(30,100)
        }
        layout[defs.call.." "..i] = {
          PrettyName = prettyPlural.."~Load "..pretty.."~"..pretty.." "..i,
          Style = "Button",
          ButtonStyle = "Trigger",
          ButtonVisualStyle = "Gloss",
          FontSize = 8,
          Position = {CustomPosX(88), TempY},
          Size = CustomSize(12)
        }
      end
      
        LineBreak(1.5)
    end
    LineBreak(-3.5)
    ------
    
  end
  
  function BuildCustomPage(pageType)
    AddLogo()
    AddHeader("Custom "..pageType.." Commands")
    LineBreak()
    for i = 1,5 do
      layout[pageType.."Str "..i] = {
        PrettyName = "Custom~"..pageType.."~Command "..i,
        Style="Text",
        Position = {DEFAULT_INPUT_X, TempY},
        Size = CustomSize(80,100),
      }
      layout[pageType.."Btn "..i] = {
        PrettyName = "Custom~"..pageType.."~Send "..i,
        Style="Button",ButtonStyle = "Trigger",
        Legend="SEND",
        Position = {CustomPosX(80), TempY},
        Size = CustomSize(20,100),
      }
      LineBreak(1.2)
      AddSubheading("RESPONSE",0,100)
      LineBreak()
      layout[pageType.."Code "..i] = {
        PrettyName = "Custom~"..pageType.."~Code "..i,
        Style="Text",
        Position = {DEFAULT_INPUT_X, TempY},
        Size = CustomSize(20,100),
      }
      layout[pageType.."Response "..i] = {
        PrettyName = "Custom~"..pageType.."~Response "..i,
        Style="Text",
        Position = {CustomPosX(22), TempY},
        Size = CustomSize(78,100),
      }
      LineBreak(1.5)
    end
  end
  
  function ConvertToArray(x)
    t={}
    obj = {}
    x:gsub("{[^{}]*}",function(c) table.insert(t,c) end)
    for k,v in ipairs(t) do
      table.insert(obj,CommaToTable(v))
    end
    return obj
  end
  
  function CommaToTable(x)
    t = {}
    str = string.sub(x,2,string.len(x)-1)
    for word in string.gmatch(str, '([^,]+)') do
      table.insert(t,word)
    end
    return t
  end
  
  
  --Connection Setup Page
  if CurrentPage == "Setup" then
    AddLogo()
    AddHeader("CONNECTION")
    table.insert(graphics,{
      Type = "Text",
      Text = "Web Address",
      Position = {DEFAULT_INPUT_X, TempY},
      Size = DEFAULT_INPUT_SIZE,
      FontSize = INPUT_SIZE,
    })
    LineBreak()
    layout["WebAddress"] = {
      PrettyName = "ASM Web Address",
      Style = "Text",
      Position = {DEFAULT_INPUT_X, TempY},
      Size = DEFAULT_INPUT_SIZE,
      FontSize = 10,
      StrokeColor = Colors.Yellow
    }
    -- api key input
    LineBreak()
    table.insert(graphics,{
      Type = "Text",
      Text = "API Key",
      Position = {DEFAULT_INPUT_X, TempY},
      Size = DEFAULT_INPUT_SIZE,
      FontSize = LABEL_SIZE,
    })
    LineBreak()
    layout["APIkey"] = {
      PrettyName = "API Key",
      Style = "Text",
      Position = {DEFAULT_INPUT_X, TempY},
      Size = DEFAULT_INPUT_SIZE,
      FontSize = INPUT_SIZE,
      StrokeColor = Colors.Yellow
    }
    LineBreak()
    LineBreak()
    AddHeader("STATUS")
    layout["Status"] = {
      PrettyName="Status",
      Style = "Indicator",
      Position = {DEFAULT_INPUT_X, TempY},
      Size = CustomSize(100,120),
      FontSize = 15
    }
    LineBreak(2)
    AddHeader("Previous Commands (Click to Change)")
    layout['Last_Commands'] = {
      PrettyName="Last Commands",
      Style="ComboBox",
      Position = {DEFAULT_INPUT_X,TempY},
      Size = CustomSize(100),
      StrokeColor = Colors.Yellow
    }
    LineBreak(1.5)
    AddSubheading("COMMAND",0,30)
    AddSubheading("CODE",32,10)
    AddSubheading("ERROR",45,55)
    LineBreak()  
    layout['CalledCommand'] =  {
      PrettyName="Debug~Last Command",
      Style = "TextBox",
      Position = {CustomPosX(0), TempY},
      Size = CustomSize(30)
    }
    layout['ResponseCode'] =  {
      PrettyName="Debug~Last Code",
      Style = "TextBox",
      Position = {CustomPosX(32), TempY},
      Size = CustomSize(10)
    }
    layout['ResponseError'] =  {
      PrettyName="Debug~Last Error",
      Style = "TextBox",
      Position = {CustomPosX(45), TempY},
      Size = CustomSize(55)
    }
    LineBreak(1)
    AddSubheading("LAST URL CALLED",0,100)
    LineBreak()
    layout['ResponseURL'] =  {
      PrettyName="Debug~Last URL",
      Style = "TextBox",
      Position = {DEFAULT_INPUT_X,TempY},
      Size = CustomSize(100),
      WordWrap = true
    }
    LineBreak()
    AddSubheading("RESPONSE DATA",0,100)
    LineBreak()
    layout['ResponseData'] =  {
      PrettyName="Debug~Last Data",
      Style = "TextBox",
      Position = {DEFAULT_INPUT_X,TempY},
      Size = CustomSize(100,600),
      WordWrap = true
    }
    LineBreak(2)
  --------------------------------
  
  elseif CurrentPage == "Wall Config" then
    AddLogo()
    AddSubheading("Discovered Walls",0,100)
    layout["GetWalls"] = {PrettyName = "Wall Config~Get Walls",Style="Button",ButtonStyle = "Trigger",Legend = "REFRESH",Position = {CustomPosX(80), TempY},Size = CustomSize(20),}
    LineBreak(1.2)
    layout["AvailableWalls"] = {PrettyName = "Wall Config~Available Walls",Style="ComboBox",StrokeColor = Colors.Yellow,Position = {DEFAULT_INPUT_X, TempY},Size = DEFAULT_INPUT_SIZE,}
    ---
    LineBreak(2)
    AddHeader("WALL DEFINITION")
    AddSubheading("WALL ID",0,45)
    AddSubheading("WALL NAME",55,45)
    LineBreak()
    layout["WallID"] = {
      PrettyName = "Wall Config~Definition~Wall ID",
      Style="Text",
      Position = {DEFAULT_INPUT_X, TempY},
      Size = CustomSize(45,100),
    }
    layout["WallName"] = {
      PrettyName = "Wall Config~Definition~Wall Name",
      Style="Text",
      Position = {CustomPosX(55), TempY},
      Size = CustomSize(45,100),
    }
    LineBreak(1)
    AddSubheading("x",0,20)
    AddSubheading("y",25,20)
    AddSubheading("width",55,20)
    AddSubheading("height",80,20)
    LineBreak()
    layout["Wall_X"] = {PrettyName = "Wall Config~Definition~Wall X",Style="Text",Position = {DEFAULT_INPUT_X, TempY},Size = CustomSize(20,100),}
    layout["Wall_Y"] = {PrettyName = "Wall Config~Definition~Wall Y",Style="Text",Position = {CustomPosX(25), TempY},Size = CustomSize(20,100),}
    layout["Wall_Width"] = {PrettyName = "Wall Config~Definition~Wall Width",Style="Text",Position = {CustomPosX(55), TempY},Size = CustomSize(20,100),}
    layout["Wall_Height"] = {PrettyName = "Wall Config~Definition~Wall Height",Style="Text",Position = {CustomPosX(80), TempY},Size = CustomSize(20,100),}
    LineBreak(2)
    AddSubheading("Select Default ViewScreen:",0,50)
    layout["Wall_VS"] = {
      PrettyName = "Wall Config~Definition~Default ViewScreen",
      Style="ComboBox",
      StrokeColor = Colors.Yellow,
      CornerRadius = 5,
      Position = {CustomPosX(55), TempY},
      Size = CustomSize(20,100),
    }
    layout["ClearVS"] = {
      Style="Button",
      PrettyName = "Wall Config~Clear ViewScreen",
      ButtonStyle = "Trigger",
      CornerRadius = 5,
      StrokeColor = Colors.Red,
      Position =  {CustomPosX(80), TempY},
      Size = CustomSize(20,100),
      Legend = "CLEAR"
    }
    LineBreak(1.5)
    
    AddSubheading("Wall Layouts",0,45)
    AddSubheading("Wall Templates",55,45)
    LineBreak()
    layout["Wall_Layouts"] = {PrettyName = "Wall Config~Available Layouts",Style="ListBox",Position = {DEFAULT_INPUT_X, TempY},Size = CustomSize(45,500),}
    layout["Wall_Templates"] = {
      PrettyName = "Wall Config~Available Templates",
      Style="ListBox",
      Position = {CustomPosX(55), TempY},
      Size = CustomSize(45,500),
    }
    LineBreak(5)
    layout["LoadLayout"] = {PrettyName = "Wall Config~Load Selected Layout",Style="Button",ButtonStyle = "Trigger",Legend = "LOAD SELECTED LAYOUT",Position = {DEFAULT_INPUT_X, TempY},Size = CustomSize(45,100),}
    LineBreak()
    AddHeader("CURRENT CONTENT")
    for i = 1,5 do
      layout["VS_SourceView_Select "..i] = {
        PrettyName = "Wall Config~ViewScreen Select~VS "..i,
        Style="Button",
        ButtonStyle = "Toggle",
        CornerRadius = 5,
        Position = {CustomPosX((i-1)*10), TempY},
        Size = CustomSize(10,100),
      }
    end
    layout['GetWallSources'] = {PrettyName = "Wall Config~Get Wall Content",Style="Button",ButtonStyle="Trigger",Legend = "Refresh",Position = {CustomPosX(80), TempY},Size = CustomSize(20),}
    LineBreak()
    for i = 1,5 do
      layout["LoadedSources "..i] = {
        PrettyName = "Wall Config~Loaded Sources~ViewScreen "..i,
        Style="ListBox",
        Position = {DEFAULT_INPUT_X, TempY},
        Size = CustomSize(100,600),
      }
    end
    LineBreak(2)
  elseif CurrentPage == "Layouts" then
    BuildEditPage("Layout")
  elseif CurrentPage == "Scripts" then
    BuildEditPage("Script")
  elseif CurrentPage == "Sources" then
    BuildEditPage("Source")
  end
  
  return layout, graphics
end

--Start event based logic
if Controls then
  -- Required
  rapidjson=require("rapidjson")
  EzSVG = require "EzSVG"
  SIMPLE_COMMANDS = {'Layout','Script','Source'}--,'Source'}
  Controls = Controls
  --********************************************************************************
  --* Aliases
  --********************************************************************************
  EditWebAddr = Controls.WebAddress
  EditAPI = Controls.APIkey
  SelectWalls = Controls.AvailableWalls
  BtnGetWalls = Controls.GetWalls
  BtnGetSources = Controls.GetSources
  EditStatus = Controls.Status
  EditWallName = Controls.WallName
  EditWallID = Controls.WallID
  EditWall_X = Controls.Wall_X
  EditWall_Y = Controls.Wall_Y
  EditWall_Width = Controls.Wall_Width
  EditWall_Height = Controls.Wall_Height
  EditWall_VS = Controls.Wall_VS
  EditLayouts = Controls.Wall_Layouts
  EditTemplates = Controls.Wall_Templates
  BtnVsSrcSelect = Controls.VS_SourceView_Select
  BtnClearVS = Controls.ClearVS
  BtnGetWallsources = Controls.GetWallSources
  ListLoadedSources = Controls.LoadedSources
  ListLayoutSources = Controls.LayoutSourceListTemp
  BtnLoadLayout = Controls.LoadLayout
  BtnClear = Controls.btnClear
  EditLastCommands = Controls.Last_Commands
  EditCalledCommand = Controls.CalledCommand
  EditResponseData = Controls.ResponseData
  EditResponseCode = Controls.ResponseCode
  EditResponseError = Controls.ResponseError
  EditResponseURL = Controls.ResponseURL
  TxtDebug = Controls.debug
  EditSendStr = Controls.SendString
  
  
  --********************************************************************************
  --* Dynamic Variables
  --********************************************************************************
  for k,type in ipairs(SIMPLE_COMMANDS) do
    _G['btn'..type..'Edit'] = Controls[pageDefs[type].edit]
    _G['btn'..type..'Call'] = Controls[pageDefs[type].call]
    _G['btn'..type..'Remove'] = Controls[pageDefs[type].remove]
    _G['edit'..type..'Def'] = Controls[pageDefs[type].callDef]
    _G['edit'..type..'ID'] = Controls[pageDefs[type].id]
    _G['edit'..type..'Legend'] = Controls[pageDefs[type].legend]
    _G['btn'..type..'UCIEdit'] = Controls[pageDefs[type].uciDefined]
    _G[type..'Preview'] = Controls[pageDefs[type].preview.name]
    _G['btnGet'..type..'s'] = Controls[pageDefs[type].get]
  
    _G['edit'..type..'_x'] = Controls[pageDefs[type].region.x]
    _G['edit'..type..'_y'] = Controls[pageDefs[type].region.y]
    _G['edit'..type..'_width'] = Controls[pageDefs[type].region.width]
    _G['edit'..type..'_height'] = Controls[pageDefs[type].region.height]
    _G['btn'..type..'_trigger'] = Controls[pageDefs[type].triggerAll]
  end
  ----
  
  
  --********************************************************************************
  --* Constants
  --********************************************************************************
  OK = "0"
  DEBUG_WINDOW_SIZE = -1500
  ALL_SOURCE_LABEL = "ALL"
  MANUAL_SORUCE_ID = "ManualSourceAdd"
  TOTAL_DESTINATIONS = 30
  UNIVERSAL_LABEL = "UNIVERSAL"
  CLEARSOURCESTRING = "Clear Sources"
  SOURCE_DROPDOWN_DEFAULT = "*Click to Change*"
  INSTANCE_STRING = 'Instance_'..math.random(100000, 999999)..'_'
  DEFAULT_WEBADDR = "https://<ipaddress>:59081"
  
  STATUS_CODES = {
    {nil,"Fault","Fault"},
    {0,"MISSING","Connection Timeout"},
    {1,"MISSING","Disconnected"},
    {2,"INITIALIZING",""},
    {3,"MISSING","Missing IP Address"},
    {4,"MISSING","Missing API Key"},
    {200,"OK",""},
    {400,"FAULT","Bad Request"},
    {401,"FAULT","Unauthorized"},
    {406,"FAULT","Not Acceptable"},
    {500,"FAULT","Server Error"},
  }
  
  --********************************************************************************
  --* Enumerated types
  --********************************************************************************
  CONN_COLOR   = {GREY = 0, RED = 1, YELLOW = 2, GREEN = 3}
                --Green   Orange           Red        Grey            Red          Blue
  STATUS_STATE = {OK = 0, COMPROMISED = 1, FAULT = 2, NOTPRESENT = 3, MISSING = 4, INITIALIZING = 5}
  
  
  --********************************************************************************
  --* Global objects/variables
  --********************************************************************************
  SendQueue = {}
  DebugFunction=false
  AvailableWalls = {}
  AvailableSources = {}
  AvailableLayouts = {}
  AvailableScripts = {}
  AvailableTemplates = {}
  AvailableViewscreens = {}
  CurrentSources = {
    all = {},
  }
  CurrentPosition = 0
  LoadedSourceIndex = {}
  SelectedArray = {}
  LastResponses = {}
  
  --********************************************************************************
  --* Debug display/print functions
  --********************************************************************************
  
  --********************************************************************************
  --* Function: PrintDebug(level,debut)
  --* Description: prints data into console and debug window.
  --********************************************************************************
  function PrintDebug( level, debug )
  	if Properties["Debug Print"].Value == level then
  		print(debug)
  	elseif level == "Tx" and Properties["Debug Print"].Value == "Tx/Rx" then
  		print(debug)
  	elseif level == "Rx" and Properties["Debug Print"].Value == "Tx/Rx" then
  		print(debug)
  	elseif Properties["Debug Print"].Value == "All" then
  		print(debug)
  	end
  	
  end
  
  
  --********************************************************************************
  --* Discovery Functions
  --********************************************************************************
  
  --********************************************************************************
  --* General Functions
  --********************************************************************************
  
  
  --********************************************************************************
  --* Function: ReportStatus(state, msg, debugStr)
  --* Description: Update status message and state to given values
  --********************************************************************************
  function ReportStatus(state, msg, debugStr)
    EditStatus.Value = STATUS_STATE[state]
    EditStatus.String = msg
    if (STATUS_STATE[state] > 0) then
      if debugStr ~= nil then
        if debugStr ~= "" then
          if DebugFunction then print(debugStr.."-"..msg) end
        else
          if DebugFunction then print(msg) end
        end
      else
        if DebugFunction then print(msg) end
      end
    end
  end
  
  
  --********************************************************************************
  --* Function: ParseCode(code)
  --* Description: parses return code and updates status if needed
  --********************************************************************************
  function ParseCode(code)
    for key,object in ipairs(STATUS_CODES) do
      local status_code = object[1]
      local status = object[2]
      local message = object[3]
      if code == status_code then ReportStatus(status,message) end
    end
  end
  
  
  --********************************************************************************
  --* Function: LoadWalls(data)
  --* Description: populate Discovered Walls based on pulled data
  --********************************************************************************
  function LoadWalls(data)
    printFunction(debug.getinfo(1, "n").name, data);
    AvailableWalls = qsc_json.decode(data)
    SelectWalls.Choices = OnlyNames(AvailableWalls)
    CheckIfPopulated(SelectWalls)
    UpdateWallInfo()
  end
  
  
  --********************************************************************************
  --* Function: printFunction(name,content)
  --* Description: takes function name and content, converts it, and sends to debug
  --********************************************************************************
  function printFunction(name,content)
    if content == nil then content = "" end
    if type(content) == "userdata" then content = "" end
    if type(content) == "table" then content = table_to_string(content) end
    PrintDebug("Function Calls",name.."("..content..")")
  end
  
  
  function table_to_string(tbl)
    local result = "{"
    for k, v in pairs(tbl) do
      -- Check the key type (ignore any numerical keys - assume its an array)
      if type(k) == "string" then
          result = result.."\""..k.."\""..":"
      end
  
      -- Check the value type
      if type(v) == "table" then
          result = result..table_to_string(v)
      elseif type(v) == "boolean" then
          result = result..tostring(v)
      else
          result = result.."\""..v.."\""
      end
      result = result..","
    end
    -- Remove leading commas from the result
    if result ~= "{" then
      result = result:sub(1, result:len()-1)
    end
    return result.."}"
  end
  
  
  
  --********************************************************************************
  --* Function: PopulateWallData()
  --* Description: populate wall data
  --********************************************************************************
  function PopulateWallData(data)
    printFunction(debug.getinfo(1, "n").name,data);
    local wallData = qsc_json.decode(data)
    local geometry = wallData.geometry
    AvailableLayouts = wallData.layouts
    AvailableTemplates = wallData.templates
    AvailableViewscreens = wallData.viewScreens
    EditWall_X.Value = geometry.x
    EditWall_Y.Value = geometry.y
    EditWall_Width.Value = geometry.width
    EditWall_Height.Value = geometry.height
    EditWall_VS.Choices = AvailableViewscreens
    for key,obj in ipairs (BtnVsSrcSelect) do
      if AvailableViewscreens[key] ~= nil then
        obj.Legend = AvailableViewscreens[key]
        obj.IsInvisible = false
      else
        obj.IsInvisible = true
      end
    end
    EditLayouts.Choices = OnlyNames(AvailableLayouts)
    EditTemplates.Choices = OnlyNames(AvailableTemplates)
    CheckIfPopulated(EditWall_VS)
  end
  
  
  
  --********************************************************************************
  --* Function: PopulateData(type,data)
  --* Description: updates available layouts/script/sources based on incoming data
  --********************************************************************************
  function PopulateData(type,data)
    printFunction(debug.getinfo(1, "n").name,type..','..data);
    local available = qsc_json.decode(data)
    local types = type..'s'
    local _editDef = _G['edit'..type..'Def']
    local _btnGet = _G['btnGet'..types]
    local options = {}
    local changeString = "* Click to Change *"
  
  
    _G['Available'..types] = available
  
    table.insert(options,changeString)
    table.insert(options,'')
    
    for key,object in ipairs(available) do
      if object.target == nil or object.target == EditWallID.String then
        table.insert(options,object.name)
      end
    end
  
    for key,object in ipairs(_editDef) do
      object.Choices = options
      if object.String == "" then object.String = changeString end
    end
  end
  
  
  --********************************************************************************
  --* Function: CheckIfPopulated(object)
  --* Description: checks if current object is populated.  
  --* If not, sets to first choice
  --********************************************************************************
  function CheckIfPopulated(object)
    if object.String == "" then
      object.String = object.Choices[1]
    end
  end
  
  
  --********************************************************************************
  --* Function: OnlyNames(table)
  --* Description: takes a table of data and returns an array of just the names
  --********************************************************************************
  function OnlyNames(data)
    local options = {}
    for key,object in ipairs(data) do
      table.insert(options,object.name)
    end
    table.sort(options)
    return options
  end
  
  
  --********************************************************************************
  --* Function: SourceEditSelect(i,tab,tabIndex)
  --* Description: function for when a layout edit button is pressed
  --********************************************************************************
  function EditSelect(type,buttonID)
    local _btnEdit = _G['btn'..type..'Edit']
    for key,object in ipairs(_btnEdit) do
      object.Boolean = key == buttonID
    end
    GetPreview(type,buttonID)
  end
  
  
  --********************************************************************************
  --* Function: GetPreview(type,key)
  --* Description: populate preview and other data when selection changes
  --********************************************************************************
  function GetPreview(type,key)
    local name = _G['edit'..type..'Def'][key].String
    local id = GetID(_G['Available'..type..'s'],name)
    local _uci = _G['btn'..type..'UCIEdit']
    local _legend = _G['edit'..type..'Legend']
    
    if not _uci[key].Boolean and type ~= 'Source' then
      _G['btn'..type..'Call'][key].Legend = name
    end
    _legend[key].String = name
    _G['edit'..type..'ID'][key].String = id
    
    if type == 'Layout' then
      GET("GetLayoutInfo",id)
    end
  end
  
  
  --********************************************************************************
  --* Function: UpdateLegend(button,string)
  --* Description: updates touch panel button based on defined string
  --********************************************************************************
  function UpdateLegend(button,string1)
    button.Legend = string1
  end
  
  
  function EnableUCIEdit(type,i,bool)
    printFunction(debug.getinfo(1, "n").name,type..','..i..","..bool);
    local legend = _G['edit'..type..'Legend'][i]
    local button = _G['btn'..type..'Call'][i]
    legend.IsDisabled = bool
    if bool then 
      button.Legend = ""
    else
      button.Legend = legend.String
    end
  end
  
  
  --********************************************************************************
  --* Function: PopulateLayoutInfo()
  --* Description: populate preview window with relevant layout data
  --********************************************************************************
  function PopulateLayoutInfo(data)
    printFunction(debug.getinfo(1, "n").name,data);
    local layoutData = qsc_json.decode(data)
    local sourceInstances = layoutData.sourceInstances
    local sourceNames = {"*click to show*"}
    for key,object in ipairs(OnlyNames(sourceInstances)) do
      table.insert(sourceNames,object)
    end
    ListLayoutSources.Choices = sourceNames
    ListLayoutSources.String = "*click to show*"
    --ListLayoutSources.String = sourceStr
    local gridCoords = BuildCoordsFromLayout(sourceInstances)
    local grid = BuildGrid(gridCoords)
    Draw(grid,LayoutPreview)
  end
  
  
  --********************************************************************************
  --* Function: LoadCommand(key)
  --* Description: sends the load layout command using wall definition and key
  --********************************************************************************
  function LoadCommand(type,key)
    local ID = _G['edit'..type..'ID'][key].String
    local sharedTrigger = _G['btn'..type..'_trigger']
    if type == 'Source' then
      local x = editSource_x[key].String
      local y = editSource_y[key].String
      local width = editSource_width[key].String
      local height = editSource_height[key].String
      AddSource(ID,INSTANCE_STRING..key,x,y,width,height)
    else
      POST('load'..type,ID)
    end
    sharedTrigger:Trigger()
  end
  
  
  
  
  --*********************************************************************************************************************************
  --*********************************************************************************************************************************
  
  
  --********************************************************************************
  --* Function: GetID(table,name)
  --* Description: determines the ID based on a name/only list
  --********************************************************************************
  function GetID(table,name)
    local ID = ""
    for key,object in ipairs(table) do
      if name == object.name then ID = object.id end
    end
    return ID
  end
  
  
  --********************************************************************************
  --* Function: updateWallInfo()
  --* Description: updates wall definition based on selected wall
  --********************************************************************************
  function UpdateWallInfo()
    printFunction("UpdateWallInfo")
    local wallString = SelectWalls.String
    EditWallName.String = wallString
    EditWallID.String = GetID(AvailableWalls,wallString)
    GET("GetWallData")
    GET("WallSources")
  end
  
  
  
  --********************************************************************************
  --* Function: ComboSelect(key,array)
  --* Description: 
  --********************************************************************************
  function ComboSelect(key,array)
    for k,o in ipairs(array) do
      o.Boolean = key == k
    end
  end
  
  
  --********************************************************************************
  --* Function: PopulateLoadedSources(data)
  --* Description: populate the currently loaded sources into tables
  --********************************************************************************
  function PopulateLoadedSources(data)
    printFunction(debug.getinfo(1, "n").name,data)
    CurrentSources.all = qsc_json.decode(data)
    CurrentSources.template = {}
    CurrentSources.other = {}
    for k,vs in ipairs(AvailableViewscreens) do
      local currentVS = {}
      for key,source in ipairs(CurrentSources.all) do
        if source.viewScreen == vs then
          if source.sourceType == "WIDGET" then source.sourceId = "n/a" end
          local tableData = ""
          if source.adHoc ~= true then
            tableData = source.name.." ["..source.sourceId.."] "..source.id
          else
            tableData = source.name.." [adhoc/unknown]"
          end
          table.insert(currentVS,tableData)
        end
      end
      ListLoadedSources[k].Choices = currentVS
    end
  end
  
  
  --********************************************************************************
  --* Function: HideSourceLists(key)
  --* Description: hide all lists but the one selected
  --********************************************************************************
  function HideSourceLists(selectedCtl)
    for key,object in ipairs(BtnVsSrcSelect) do
      object.Boolean = selectedCtl == key
    end
    for key,object in ipairs(ListLoadedSources) do
      object.IsInvisible = selectedCtl ~= key
    end
  end
  
  
  --********************************************************************************
  --* Function: AddSource(sourceID,sourceInstanceId,x,y,w,h)
  --* Description: add source to wall based on included info.  If in Touch Panel mode
  --* will temporarily add a source to the wall representation. 
  --********************************************************************************
  function AddSource(sourceID,sourceInstanceId,x,y,width,height) --add VS?
    printFunction(debug.getinfo(1, "n").name,sourceID..','..sourceInstanceId..','..x..','..y..','..width..','..height);
    local vsIndex = GetVsNumber()
    for key,object in ipairs(EditWall_VS.Choices) do
      if EditWall_VS.String == object then
        vsIndex = key
      end
    end
    local data = '{"sourceId": "'..sourceID..'"'
    ..',"sourceInstanceId": "'..sourceInstanceId..'"'
    ..',"viewScreenId": '..vsIndex
    ..',"region": '
    ..'{"x": '.. x
    ..',"y": '.. y
    ..',"width": '.. width
    ..',"height": '.. height
    ..'}}'
    POST('AddSource',data)
    --GET("WallSources")
  end
  
  
  --********************************************************************************
  --* Function: GetVsNumber()
  --* Description: get and return selected viewscreen index number
  --********************************************************************************
  function GetVsNumber()
    local vs = 1
    for key,object in ipairs(EditWall_VS.Choices) do
      if EditWall_VS.String == object then
        vs = key
      end
    end
    return vs
  end
  
  
  --********************************************************************************
  --* Function: RemoveSource(sourceInstanceId)
  --* Description: removes the specific source instance from wall
  --********************************************************************************
  function RemoveSource(sourceInstanceId)
    printFunction(debug.getinfo(1, "n").name,sourceInstanceId)
    DELETE('RemoveSource',sourceInstanceId)
  end
  
  
  --********************************************************************************
  --* Function: ClearViewscreen()
  --* Description: clear first viewscreen
  --********************************************************************************
  function ClearViewscreen()
    printFunction(debug.getinfo(1, "n").name)
    CurrentSources.all = {} 
    local selectedVS = 1
    for key,obj in ipairs(EditWall_VS.Choices) do
      if obj == EditWall_VS.String then selectedVS = key end
    end
    DELETE("ClearVS",selectedVS)
  end
  
  
  --********************************************************************************
  --* Function: BuildCoordsFromLayout(sourceInfo)
  --* Description: creates a table of xywh settings for list of sources
  --********************************************************************************
  function BuildCoordsFromLayout(sourceInfo)
    printFunction(debug.getinfo(1, "n").name,sourceInfo)
    local layoutCoords = {}
    for key,object in ipairs(sourceInfo) do
      local region = object.region
      local PctX = math.floor(region.x)
      local PctY = math.floor(region.y)
      local PctW = math.floor(region.width)
      local PctH = math.floor(region.height)
      local wall = EditWallName.String
      
      --if wallOnly then
      --  if string.find(object.id,wall.."template") then
      --    table.insert(layoutCoords,{PctX,PctY,PctW,PctH,object.id,object.name,object.sourceId})
      --  end
      --else
        table.insert(layoutCoords,{PctX,PctY,PctW,PctH,object.id,object.name,object.sourceId})
      --end
    end
    return layoutCoords
  end
  
  
  --********************************************************************************
  --* Function: Draw(template,object)
  --* Description: builds and returns template grid icon
  --********************************************************************************
  function Draw(iconData,object)
    local legend = {
      DrawChrome = false,
      IconData = Crypto.Base64Encode(iconData)
    }
    object.Legend = rapidjson.encode(legend)
  end
  
  
  --********************************************************************************
  --* Function: BuildGrid(layout)
  --* Description: Utilize SVG to build template select buttons
  --********************************************************************************
  function BuildGrid(layout)
    local svgWidth = EditWall_Width.String
    local svgHeight = EditWall_Height.String
    local layoutString = ""
    local backgroundColor = 'black'
    local borderColor = 'white'
    local strokeWidth = svgWidth*.01
    EzSVG.setStyle({
      stroke_width= strokeWidth,
      stroke= borderColor,
      fill = backgroundColor
    })
    layoutString = '<?xml version="1.0" encoding="UTF-8" standalone="no"?>'
    ..'<svg width="'..svgWidth
    ..'" height="'..svgHeight..'">'
    ..'<g style="'
    ..'fill:'..backgroundColor..';'
    ..'stroke:'..borderColor
    ..';stroke-width:'..strokeWidth..';">'
  
    for k,o in ipairs(layout) do
      local x = (o[1])
      local y = (o[2])
      local width = (o[3])
      local height = (o[4])
      local newString = '<rect '..
        'x="'..x..'" '..
        'y="'..y..'" '..
        'width="'..width..'" '..
        'height="'..height..'"/>'
        layoutString = layoutString..newString
      end
    layoutString = layoutString..'</g>   </svg>'
    return layoutString
  end
  
  
  --********************************************************************************
  --* Function: HideControl(control,mode)
  --* Description: Hide and Unhide controls based on value
  --********************************************************************************
  function HideControl(control,show)
    if control.IsIndeterminate ~= false then
      for key,object in ipairs(control) do
          object.IsInvisible = show
      end
    else
      control.IsInvisible = show
    end
  end
  
  
  --********************************************************************************
  --* Function: DisableControl(control,disable)
  --* Description: Enable/Disable controls based on value
  --********************************************************************************
  function DisableControl(control,disabled)
    if control.IsIndeterminate ~= false then
      for key,object in ipairs(control) do
        object.IsDisabled = disabled
      end
    else
      control.IsDisabled = disabled
    end
  end
  
  
  --********************************************************************************
  --* Function: GetCommandURL(command)
  --* Description: builds Post URL based on given string
  --********************************************************************************
  function GetCommandURL(command,params)
    local webAddr = EditWebAddr.String.."/api/v1/"
    local apiStr = "key="..EditAPI.String
    local url = webAddr
    if command == "AddSource" then
      url = url.."walls/"..EditWallID.String.."/sources?"
    elseif command == "GetWalls" then
      url = url.."walls?"
    elseif command == "GetWallData" then
      url = url.."walls/"..EditWallID.String.."?"
    elseif command == "loadLayout" then
      url = url.."walls/"..EditWallID.String.."/loadlayout?layoutId="..params.."&"
    elseif command == "loadScript" then
      url = url.."scripts/"..params.."/execute?queryScriptParameters=none&"
    elseif command == "WallSources" then
      url = url.."walls/"..EditWallID.String.."/sources?"
    elseif command == "ClearVS" then
      url = url.."walls/"..EditWallID.String.."/viewscreen/"..params.."?"
    elseif command == "GetLayouts" then
      url = url.."layouts?"
    elseif command == "GetScripts" then
      url = url.."scripts?"
    elseif command == "GetLayoutInfo" then
      url = url.."layouts/"..params.."?"
    elseif command == "GetSources" then
      url = url.."sources?"
    elseif command == "RemoveSource" then
      url = url.."walls/"..EditWallID.String.."/sources/"..params.."?"
    end
    url = url..apiStr
    return url
  end
  
  
  --********************************************************************************
  --* Function: POST(command,dataString)
  --* Description: sends post command with relevant data
  --********************************************************************************
  function POST(command,data)
    local url = GetCommandURL(command,data)
    if command == 'loadScript' then data = "true" end
    PrintDebug("Tx","HTTP Post \n URL: "..url.."\n Data: "..data)
    HttpClient.Post {
      Url = url,
      Data = data,
      Auth = "basic",
      Timeout = 30,
      CalledCommand = command,
      Headers = {
        ["Content-Type"] = "application/json"
      },
      EventHandler = done --(done) The function to call upon response
    }
  end
  
  
  --********************************************************************************
  --* Function: PUT(command,data,data2)
  --* Description: sends post command with relevant data
  --********************************************************************************
  function PUT(command,data)
    local url = GetCommandURL(command,data)
    PrintDebug("Tx","HTTP PUT \n URL: "..url.."\n Data: "..data)
    HttpClient.Put {
      Url = url,
      Data = data,
      Auth = "basic",
      Timeout = 30,
      CalledCommand = command,
      Headers = {
        ["Content-Type"] = "application/json"
      },
      EventHandler = done --(done) The function to call upon response
    }
  end
  
  
  --********************************************************************************
  --* Function: DELETE(command,dataString)
  --* Description: sends post command with relevant data
  --********************************************************************************
  function DELETE(command,data)
    local url = GetCommandURL(command,data)
    PrintDebug("Tx","HTTP Delete \n URL: "..url.."\n Data: "..data)
    HttpClient.Upload {
      Url = url,
      Method = "DELETE",
      Data = "",
      Auth = "basic",
      Timeout = 30,
      CalledCommand = command,
      Headers = {
        ["Content-Type"] = "application/json"
      },
      EventHandler = done --(done) The function to call upon response
    }
  end
  
  
  --********************************************************************************
  --* Function: GET(command,params)
  --* Description: sends post command with relevant data
  --********************************************************************************
  function GET(command,params)
    if params == nil then params = "" end
    local url = GetCommandURL(command,params)
    PrintDebug("Tx","HTTP Get \n URL: "..url)
    HttpClient.Download {
      Url = url,
      Auth = "basic",
      Timeout = 30,
      CalledCommand = command,
      Headers = {
        ["Content-Type"] = "application/json"
      },
      EventHandler = done --(done) The function to call upon response
    }
  end
  
  
  --********************************************************************************
  --* Function: CheckIfOlder(time,qty, units)
  --* Description: Checks a specific time to see if it is older and QTY*UNTS.  
  --* returns true or false.  Example:  Current time, 5, hours.
  --********************************************************************************
  function CheckIfOlder(time,qty, units)
    local expired = false
    local secondsFrom = math.floor(os.difftime(os.time(), time))
    local minutesFrom = math.floor(secondsFrom/60)
    local hoursFrom = math.floor(secondsFrom/60 / 60)
    local daysFrom = math.floor(secondsFrom/60 / 60 / 24)
    if units == "seconds" then expired = secondsFrom > qty
    elseif units == "minutes" then expired = minutesFrom > qty
    elseif units == "hours" then expired = hoursFrom > qty
    elseif units == "days" then expired = daysFrom > qty
    end
    return expired
  end
  
  
  
  --********************************************************************************
  --* Function: done(tbl, code, data, e)
  --* Description: organizes return code and data
  --********************************************************************************
  function done(tbl, code, data, e)
    ParseCode(code)
    local url = tbl.Url
    local CalledCommand = tbl.CalledCommand
    local response = {tbl, code, data, e, CalledCommand}
    local lastCommands = {}
    local formatTime = os.date ("%Y-%m-%d %H:%M:%S")
    
    if e then --if there is an error, skip to next
    elseif CalledCommand == "GetWalls" then LoadWalls(data)
    elseif CalledCommand == "GetWallData" then PopulateWallData(data)
    elseif CalledCommand == "GetLayouts" then PopulateData('Layout',data)
    elseif CalledCommand == "GetScripts" then PopulateData('Script',data)
    elseif CalledCommand == "loadLayout" then EditLayouts.String = ""
    elseif CalledCommand == "WallSources" then PopulateLoadedSources(data)
    elseif CalledCommand == "GetLayoutInfo" then PopulateLayoutInfo(data)
    elseif CalledCommand == "GetSources" then PopulateData('Source',data)
    end
  
  
    LastResponses[formatTime] = response
    LastResponses[formatTime].command = CalledCommand
    LastResponses[formatTime].time = os.time()
    
    for time,object in pairs(LastResponses) do
      local expired = CheckIfOlder(object.time, 14, "days")
      if expired then
        LastResponses[time] = nil
      end
    end
    
    for key,object in pairs(LastResponses) do
      table.insert(lastCommands,key..' ['..object.command..']')
    end
  
    table.sort(lastCommands, function(a, b) return a > b end)
    EditLastCommands.Choices = lastCommands
    EditLastCommands.String = EditLastCommands.Choices[1]
    PrintDebug("Rx", string.format("Response Code: %i\t\tErrors: %s\rData: %s",code, e or "None", data))
    ShowResponse()
  end
  
  
  --********************************************************************************
  --* Function: ShowResponse()
  --* Description: populates response data fields based on selected command
  --********************************************************************************
  function ShowResponse()
    local timestamp,command = EditLastCommands.String:match("(.+) %[(.+)%]")
    printFunction(debug.getinfo(1, "n").name,timestamp..','..command)
    local response = LastResponses[timestamp]
    local code = response[2]
    local data = response[3]
    local e = response[4]
    local url = response[1].Url
    local dataString = tostring(data)
    EditCalledCommand.String = command
    EditResponseData.String = dataString
    EditResponseCode.String = math.floor(code)
    EditResponseError.String = e or "None"
    EditResponseURL.String = url
  end
  
  
  --********************************************************************************
  --* Function: PopulateDefaults()
  --* Description: runs through a list of potentially undefined controls and populates
  --* them with a default value
  --********************************************************************************
  function PopulateDefaults()
    local function AddStrIfBlank(object,defaultStr)
      if object.String == "" then object.String = defaultStr end
    end
    AddStrIfBlank(EditWebAddr,DEFAULT_WEBADDR)
  end
  
  
  --********************************************************************************
  --* Function: EstablishConnection()
  --* Description: check if web address and API are populated.  If they are
  --* run GetWalls command to test API key
  --********************************************************************************
  function EstablishConnection()
    printFunction("EstablishConnection")
    if EditAPI.String ~= "" and EditWebAddr.String ~= "" then
      GET("GetWalls")
    elseif EditWebAddr.String == "" or EditWebAddr.String == DEFAULT_WEBADDR then
      ParseCode(3)
    elseif EditAPI.String == "" then
      ParseCode(4)
    end
  end
  
  
  --********************************************************************************
  --* Event Handlers for Controls
  --********************************************************************************
  SelectWalls.EventHandler = UpdateWallInfo
  BtnGetWalls.EventHandler = function() GET("GetWalls") end
  BtnClearVS.EventHandler = ClearViewscreen
  BtnGetWallsources.EventHandler = UpdateWallInfo
  EditLastCommands.EventHandler = ShowResponse
  EditWebAddr.EventHandler = EstablishConnection
  EditAPI.EventHandler = EstablishConnection
  
  for key,object in ipairs(BtnVsSrcSelect) do
    object.EventHandler = function() HideSourceLists(key) end
  end
  
  BtnLoadLayout.EventHandler = function()
    local layoutID = GetID(AvailableLayouts,EditLayouts.String)
    POST('loadLayout',layoutID)
  end
  
  for k,type in ipairs(SIMPLE_COMMANDS) do
    local types = type..'s'
    local _btnGet = _G['btnGet'..types]
    local _btnUCIEdit = _G['btn'..type..'UCIEdit']
    local _editSelect = _G[type..'EditSelect']
    local _btnEdit =_G['btn'..type..'Edit']
    local _editLegend = _G['edit'..type..'Legend']
    local _btnCall = _G['btn'..type..'Call']
    local _btnRemove = _G['btn'..type..'Remove']
    local _editDef = _G['edit'..type..'Def']
    local _editID = _G['edit'..type..'ID']
    for key,object in ipairs (_btnUCIEdit) do
      object.EventHandler = function() EnableUCIEdit(type,key,object.Boolean) end
    end
    for key,object in ipairs(_btnEdit) do
      object.EventHandler = function() EditSelect(type,key) end
    end
    for key,object in ipairs(_editLegend) do
      object.EventHandler = function() UpdateLegend(_btnCall[key],object.String) end
    end
    for key,object in ipairs(_btnCall) do --trigger load command
      object.EventHandler = function() LoadCommand(type,key) end
    end
    for key,object in ipairs(_btnRemove) do --trigger load command
      object.EventHandler = function() RemoveSource(INSTANCE_STRING..key) end
    end
    for key,object in ipairs(_editDef) do
      object.EventHandler = function() 
        ComboSelect(key,_btnEdit)
        GetPreview(type,key)
        for j,o in ipairs(_editID) do --hide ID buttons based on selection
          o.IsInvisible = j ~= key
        end
      end
    end
    _btnGet.EventHandler = function() GET("Get"..types) end
  end
  
  
  --********************************************************************************
  --* Function: Initialize()
  --* Description: Initialization code for the plugin
  --********************************************************************************
  function Initialize()
  -- ParseCode(2) --Comment out for Certification Standards
    HideSourceLists(1)
    PopulateDefaults()    
    for k,type in ipairs(SIMPLE_COMMANDS) do
      local call = _G['btn'..type..'Call']
      local legend = _G['edit'..type..'Legend']
      local uciEdit = _G['btn'..type..'UCIEdit']
      for key,object in ipairs(call) do
        if uciEdit[key].Boolean then
          legend[key].IsDisabled = true  
        else
          object.Legend = legend[key].String
        end
      end
    end
    EstablishConnection()
  end
  Initialize()
end

